# {{< fa broom size=1x >}} &nbsp;&nbsp;Data cleaning (15 min)

## Checklist

:::: {.columns}

::: {.column width=33%}
- Clean column names
- Check decimal point
- Convert date format
- Check category values
- Inspect numeric values
- Check for empty rows/columns
:::

::: {.column width=33%}
- Check for constant columns
- Check for duplicates
- Missing values
- Select columns
- Filter rows
- Pivot data
:::

::: {.column width=33%}
- Merge data
- Split/combine columns
- Compute new columns
- Check binomial names


and many more...
:::
::::

<br/>

![Source: <https://xkcd.com/2180/>](images/xkcd-2180.png){width=65% fig-align='center'}



## Cleaning dirty data

:::: {.columns}

::: {.column width=50%}
![](images/janitor-screenshot.png)

<br>

Available at: <https://sfirke.github.io/janitor/>
:::

::: {.column width=50%}
<br>

```{r}
#| eval: false
#| echo: true

# Install 'janitor' package ----
install.packages("janitor")
```

<br>


| Function              | Description                               |
|:----------------------|:------------------------------------------|
| `clean_names()`       | Cleans names of a `data.frame`            |
| `remove_constant()`   | Remove constant columns                   |
| `remove_empty()`      | Remove empty rows and/or columns          |
| `get_dupes()`         | Identify column w/ identical value        |
| `single_value()`      | Check if a column has only a single value |

: Table: Main functions of `janitor`
:::
::::


## `janitor` example

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: true

## Create a data.frame with dirty names ----

test_df <- as.data.frame(matrix(ncol = 6))

names(test_df) <- c("firstName", "ábc@!*", "% successful (2009)",
                    "REPEAT VALUE", "REPEAT VALUE", "")

test_df
```
:::

::: {.column width=50%}
:::

::::



## `janitor` example

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: true

## Create a data.frame with dirty names ----

test_df <- as.data.frame(matrix(ncol = 6))

names(test_df) <- c("firstName", "ábc@!*", "% successful (2009)",
                    "REPEAT VALUE", "REPEAT VALUE", "")

test_df
```
:::

::: {.column width=50%}
```{r}
#| echo: true

## Clean column names ----

test_df <- test_df |>
  janitor::clean_names()



test_df
```
:::

::::


## Manipulating data

:::: {.columns}

::: {.column width=50%}
![](images/dplyr-screenshot.png)

<br>

Available at: <https://sfirke.github.io/dplyr/>
:::

::: {.column width=50%}
<br>

```{r}
#| eval: false
#| echo: true

# Install 'dplyr' package ----
install.packages("dplyr")
```

<br>


| Function              | Description                                      |
|:----------------------|:-------------------------------------------------|
| `arrange()`           | Order rows using column values                   |
| `filter()`            | Keep rows that match a condition                 |
| `select()`            | Keep or drop columns using their names           |
| `mutate()`            | Create, modify, and delete columns               |
| `distinct()`          | Keep distinct/unique rows                        |
| `slice()`             | Subset rows using their positions                |
| `rename()`            | Rename columns                                   |
| `pull()`              | Extract a single column                          |
| `group_by()`          | Group by one or more variables                   |
| `summarise()`         | Summarise each group down to one row             |

: Table: Main functions of `dplyr`
:::
::::



## Sorting and arranging

<br>

R package `dplyr` is very useful to :

<br>

- **select** columns (based on their names only, no $var [,"var"] etc) : `dplyr::select(column1, column2)`


- **filter** specific lines from those selected columns : `dplyr::filter(level1 == a, level2 > x)`


- apply a function to the table subset : `group_by(factor_column)` and then `mutate(new_column = old_column*2)`


- put it back together in a dataframe/data table etc.


## `dplyr` example

:::: {.columns}

::: {.column width=50%}

```{r}
#| echo: true

## Load the iris dataset ----

data("iris")

head(iris)
```

<br>
:::

::: {.column width=50%}
:::
::::


## `dplyr` example

:::: {.columns}

::: {.column width=50%}

```{r}
#| echo: true

## Load the iris dataset ----

data("iris")

head(iris)
```

<br>

```{r}
#| echo: true

## Clean column names ----

iris_nice <- janitor::clean_names(iris)

head(iris_nice)
```

:::

::: {.column width=50%}
:::
::::


## `dplyr` example

:::: {.columns}

::: {.column width=50%}

```{r}
#| echo: true

## Load the iris dataset ----

data("iris")

head(iris)
```

<br>

```{r}
#| echo: true

## Clean column names ----

iris_nice <- janitor::clean_names(iris)

head(iris_nice)
```

:::

::: {.column width=50%}
```{r}
#| echo: true

## Manipulate data ----

iris_nice |>
  dplyr::select(sepal_length, sepal_width, species) |>
  dplyr::filter(sepal_length <= 5) |>
  dplyr::group_by(species) |>
  dplyr::mutate("mean_length" = mean(sepal_length),
                "mean_width"  = mean(sepal_width))
```
:::
::::




## Merging data

The family of **`dplyr::*_join()`** functions can deal with all types of `data.frame` merges. It's the R equivalent to SQL querying. 

<br><br>

Let's load `band_instruments` and `band_members` datasets from `dplyr`.

<br/>

:::: {.columns}
::: {.column width=45%}

```{r}
#| echo: true

## Load 'band_instruments' data ----

instruments <- dplyr::band_instruments |> 
  as.data.frame()

instruments
```
:::

::: {.column width=10%}
:::

::: {.column width=45%}

```{r}
#| echo: true

## Load 'band_members' data ----

members <- dplyr::band_members |>
  as.data.frame()

members
```
:::
::::



## Merging data

:::: {.columns}
::: {.column width=45%}
**`left_join()`** keeps all rows in `x`.

```{r}
#| echo: true
#| warning: false

dplyr::left_join(x = members, y = instruments) 
```
:::

::: {.column width=10%}
:::

::: {.column width=45%}
:::
::::

<br>

:::: {.columns}
::: {.column width=45%}
:::

::: {.column width=10%}
:::

::: {.column width=45%}
:::
::::



## Merging data

:::: {.columns}
::: {.column width=45%}
**`left_join()`** keeps all rows in `x`.

```{r}
#| echo: true
#| warning: false

dplyr::left_join(x = members, y = instruments) 
```
:::

::: {.column width=10%}
:::

::: {.column width=45%}
**`right_join()`** keeps all rows in `y`.

```{r}
#| echo: true
#| warning: false

dplyr::right_join(members, instruments) 
```
:::
::::

<br>

:::: {.columns}
::: {.column width=45%}
:::

::: {.column width=10%}
:::

::: {.column width=45%}
:::
::::


## Merging data

:::: {.columns}
::: {.column width=45%}
**`left_join()`** keeps all rows in `x`.

```{r}
#| echo: true
#| warning: false

dplyr::left_join(x = members, y = instruments) 
```
:::

::: {.column width=10%}
:::

::: {.column width=45%}
**`right_join()`** keeps all rows in `y`.

```{r}
#| echo: true
#| warning: false

dplyr::right_join(members, instruments) 
```
:::
::::

<br>

:::: {.columns}
::: {.column width=45%}
**`inner_join()`** only keeps rows from `x` that have a matching key in `y`.

```{r}
#| echo: true
#| warning: false


dplyr::inner_join(members, instruments) 
```
:::

::: {.column width=10%}
:::

::: {.column width=45%}
:::
::::



## Merging data

:::: {.columns}
::: {.column width=45%}
**`left_join()`** keeps all rows in `x`.

```{r}
#| echo: true
#| warning: false

dplyr::left_join(x = members, y = instruments) 
```
:::

::: {.column width=10%}
:::

::: {.column width=45%}
**`right_join()`** keeps all rows in `y`.

```{r}
#| echo: true
#| warning: false

dplyr::right_join(members, instruments) 
```
:::
::::

<br>

:::: {.columns}
::: {.column width=45%}
**`inner_join()`** only keeps rows from `x` that have a matching key in `y`.

```{r}
#| echo: true
#| warning: false


dplyr::inner_join(members, instruments) 
```
:::

::: {.column width=10%}
:::

::: {.column width=45%}
**`full_join()`** keeps all rows in `x` and `y` (most conservative method).

```{r}
#| echo: true
#| warning: false

dplyr::full_join(members, instruments) 
```
:::
::::



## `dplyr` cheatsheet

![Source: <https://rstudio.github.io/cheatsheets/html/data-transformation.html>](images/dplyr-cheatsheet.png){width=60% fig-align='center'}


## Pivoting data

:::: {.columns}

::: {.column width=50%}
![](images/tidyr-screenshot.png)

<br>

Available at: <https://tidyr.tidyverse.org/>
:::

::: {.column width=50%}
<br>

```{r}
#| eval: false
#| echo: true

# Install 'httr2' package ----
install.packages("tidyr")
```

<br>


| Function              | Description                              |
|:----------------------|:-----------------------------------------|
| `pivot_longer()`      | Pivot data from wide to long             |
| `pivot_wider()`       | Pivot data from long to wide             |

: Table: Main functions of `tidyr`
:::
::::


## Wide vs Long format

:::: {.columns}

::: {.column .center width=50%}
<br>

**`tidyr::pivot_longer()`**

<br>

![](images/pivot_longer.png)
:::

::: {.column .center width=50%}
<br>

**`tidyr::pivot_wider()`**

<br>

![](images/pivot_wider.png)

:::

::::

::: {.citation}
Source: <https://rstudio.github.io/cheatsheets/html/tidyr.html>
:::


## Pivot to long format

The function **`tidyr::pivot_longer()`** compiles information from multiple columns into a unique column. This is commonly needed to reformat datasets that were optimized for ease of data entry or comparison rather than ease of analysis. 

<br>

> This format is the one privileged by the `ggplot2` functions.


:::: {.columns}

::: {.column .center width=50%}
```{r}
#| echo: true

## Load dataset ----

data("relig_income", package = "tidyr")



head(relig_income)
```
:::

::: {.column .center width=50%}
:::
::::



## Pivot to long format

The function **`tidyr::pivot_longer()`** compiles information from multiple columns into a unique column. This is commonly needed to reformat datasets that were optimized for ease of data entry or comparison rather than ease of analysis. 

<br>

> This format is the one privileged by the `ggplot2` functions.


:::: {.columns}

::: {.column .center width=50%}
```{r}
#| echo: true

## Load dataset ----

data("relig_income", package = "tidyr")



head(relig_income)
```
:::

::: {.column .center width=50%}

```{r}
#| echo: true

## Pivot to longer ----
newtab <- relig_income |> 
  tidyr::pivot_longer(cols      = !religion,
                      names_to  = "income",
                      values_to = "count")

newtab
```
:::
::::






## Pivot to wide format

The function **`tidyr::pivot_wider()`** is the opposite of `tidyr::pivot_longer()`.

<br/>

:::: {.columns}

::: {.column width=60%}
```{r}
#| echo: true

## Pivot to wider ----

back <- newtab |> 
  tidyr::pivot_wider(names_from  = income,
                     values_from = count)

back
```
:::

::: {.column width=50%}
:::
::::



## `tidyr` cheatsheet

![Source: <https://rstudio.github.io/cheatsheets/html/tidyr.html>](images/tidyr-cheatsheet.png){width=60% fig-align='center'}




## Manipulating strings

:::: {.columns}

::: {.column width=50%}
```{r}
#| eval: false
#| echo: true

## Creating strings ----

string0 <- ""
string1 <- "This is a string"
string2 <- 'This is a string with a "quote" inside'
string3 <- "Another string with a \"quote\" inside"
```
:::

::: {.column width=50%}
```{r}
#| eval: false
#| echo: true

## Do not forget to close quotes ----

> "This is a string without a closing quote
+ 
+ 
+ HELP I'M STUCK
```
:::
::::


```{r}
#| eval: false
#| echo: false

"
```

<br/>

. . .

The function **`paste()`**

:::: {.columns}

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Paste two vectors ----

firstname <- "Camille"
lastname  <- "Coux"

paste(firstname, lastname)
```
:::

::: {.column width=50%}

```{r}
#| eval: true
#| echo: true

## Collapse elements of a vector ----

fullname <- c("Camille", "Coux")


paste(fullname, collapse = ", ")
```
:::
::::

<br/>

. . .


The function **`strsplit()`**

:::: {.columns}

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Split a string by a pattern ----

fullname <- "Camille Coux"

strsplit(fullname, split = " ")
```
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Split a string by a pattern (2) ----

fullname <- c("Camille Coux", "Nicolas Casajus")

strsplit(fullname, split = " ")
```
:::
::::



## Manipulating strings

:::: {.columns}

::: {.column width=50%}
![](images/stringr-screenshot.png)

<br>

Available at: <https://stringr.tidyverse.org/>
:::

::: {.column width=50%}
<br>

```{r}
#| eval: false
#| echo: true

# Install 'stringr' package ----
install.packages("stringr")
```

<br>


| Function              | Description                              |
|:----------------------|:-----------------------------------------|
| `str_detect()`        | Detect the presence/absence of a pattern |
| `str_extract()`       | Extract the first match from each string |
| `str_extract_all()`   | Extract all match from each string       |
| `str_replace()`       | Replace the first match by a text        |
| `str_replace_all()`   | Replace all matches by a text            |
| `str_remove()`        | Remove the first match                   |
| `str_remove_all()`    | Remove all matches                       |
| `str_split()`         | Split up a string into pieces            |
| `str_to_upper()`      | Convert a string to upper case           |
| `str_to_lower()`      | Convert a string to lower case           |

: Table: Main functions of `stringr`
:::
::::


## Manipulating strings

The `stringr` package uses a standardized set of functions applied to strings

<br/>

:::: {.columns}

::: {.column width=40%}
:::

::: {.column width=60%}
```{r}
#| eval: true
#| echo: true

## Create a string vector ----

fullnames <- c("Camille", "Nicolas", "Olivier", "Yvan", "Sophie", "Anne-Sophie")
```
:::

::::

<br/>

. . .


**Detect pattern**[^grep]

:::: {.columns}

::: {.column width=50%}
- `str_detect()` returns a boolean
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Detect a pattern (boolean) ----

stringr::str_detect(string = fullnames, pattern = "phi")
```
:::

::::

. . .


<br/>

:::: {.columns}

::: {.column width=50%}
- `str_which()` returns a position
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Detect pattern (position) ----

stringr::str_which(string = fullnames, pattern = "phi")
```
:::

::::

. . .

<br/>

:::: {.columns}

::: {.column width=50%}
- `str_count()` returns number of matches
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Count occurrences ----

stringr::str_count(string = fullnames, pattern = "n")
```
:::

::::


[^grep]: Same as the base function `grep()`




## Manipulating strings

The `stringr` package uses a standardized set of functions applied to strings

<br/>

:::: {.columns}

::: {.column width=40%}
:::

::: {.column width=60%}
```{r}
#| eval: true
#| echo: true

## Create a string vector ----

fullnames <- c("Camille", "Nicolas", "Olivier", "Yvan", "Sophie", "Anne-Sophie")
```
:::

::::

<br/>

**Subset matches**

:::: {.columns}

::: {.column width=50%}
- `str_subset()`[^grep2]
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Subset matches ----

stringr::str_subset(string = fullnames, pattern = "phi")
```

<br/>

```{r}
#| eval: true
#| echo: true

## Subset matches (negate) ----

stringr::str_subset(string = fullnames, pattern = "phi", negate = TRUE)
```
:::

::::

[^grep2]: Same as `grep(pattern, string, value = TRUE)`




## Manipulating strings

The `stringr` package uses a standardized set of functions applied to strings

<br/>

:::: {.columns}

::: {.column width=40%}
:::

::: {.column width=60%}
```{r}
#| eval: true
#| echo: true

## Create a string vector ----

fullnames <- c("Camille", "Nicolas", "Olivier", "Yvan", "Sophie", "Anne-Sophie")
```
:::

::::

<br/>

**Replace pattern**

:::: {.columns}

::: {.column width=50%}
- `str_replace()`[^gsub] replaces first occurrence
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Replace first occurrence of a pattern ----

stringr::str_replace(string      = fullnames, 
                     pattern     = "i", 
                     replacement = "u")
```
:::

::::

<br/>

. . .

:::: {.columns}

::: {.column width=50%}
- `str_replace_all()` replaces all occurrences
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Replace all occurrences of a pattern ----

stringr::str_replace_all(string      = fullnames, 
                         pattern     = "i", 
                         replacement = "u")
```
:::

::::


[^gsub]: Same as the base function `gsub()`




## Manipulating strings

The `stringr` package uses a standardized set of functions applied to strings

<br/>

:::: {.columns}

::: {.column width=40%}
:::

::: {.column width=60%}
```{r}
#| eval: true
#| echo: true

## Create a string vector ----

fullnames <- c("Camille", "Nicolas", "Olivier", "Yvan", "Sophie", "Anne-Sophie")
```
:::

::::

<br/>

**Character case**


:::: {.columns}

::: {.column width=50%}
- `str_to_upper()`[^upper] converts to upper case
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Convert to upper case ----

stringr::str_to_upper(string = fullnames)
```
:::

::::

<br/>

. . .

:::: {.columns}

::: {.column width=50%}
- `str_to_lower()`[^lower] converts to lower case
:::

::: {.column width=50%}
```{r}
#| eval: true
#| echo: true

## Convert to lower case ----

stringr::str_to_lower(string = fullnames)
```
:::

::::

. . .

And many more...

[^upper]: Same as the base function `toupper()`
[^lower]: Same as the base function `tolower()`



## The wonderful world of regex

**How can we specify generic patterns?**

<br/>

. . .

{{< fa circle-right >}} &nbsp;**Regular expressions**, or **_regex_**: a concise language for describing patterns in strings. More [**here**](https://r4ds.had.co.nz/strings.html).

<br/>

. . .

**Examples**



:::: {.columns}

::: {.column width=40%}
```{r}
#| eval: true
#| echo: true

## Create a string ----

my_string <- "My email is: camille123@gmail.com ."
```


:::

::: {.column width=60%}
:::

::::





## The wonderful world of regex

**How can we specify generic patterns?**

<br/>



{{< fa circle-right >}} &nbsp;**Regular expressions**, or **_regex_**: a concise language for describing patterns in strings. More [**here**](https://r4ds.had.co.nz/strings.html).

<br/>



**Examples**



:::: {.columns}

::: {.column width=40%}
```{r}
#| eval: true
#| echo: true

## Create a string ----

my_string <- "My email is: camille123@gmail.com ."
```


:::

::: {.column width=60%}
```{r}
#| echo: true

## Extract first number ----

stringr::str_extract(my_string, "\\d")
```

<br/>

```{r}
#| echo: true

## Extract first consecutive numbers ----

stringr::str_extract(my_string, "\\d+")
```


<br/>

```{r}
#| echo: true

## Alternative ----

stringr::str_extract(my_string, "[0-9]+")
```
:::

::::



## The wonderful world of regex

**How can we specify generic patterns?**

<br/>



{{< fa circle-right >}} &nbsp;**Regular expressions**, or **_regex_**: a concise language for describing patterns in strings. More [**here**](https://r4ds.had.co.nz/strings.html).

<br/>



**Examples**



:::: {.columns}

::: {.column width=40%}
```{r}
#| eval: true
#| echo: true

## Create a string ----

my_string <- "My email is: camille123@gmail.com ."
```


:::

::: {.column width=60%}
```{r}
#| echo: true

## Extract all letters ----

stringr::str_extract_all(my_string, "[A-z]")
```

<br/>

```{r}
#| echo: true

## Extract first consecutive letters ----

stringr::str_extract(my_string, "[A-z]+")
```


<br/>

```{r}
#| echo: true

## Extract complex pattern ----

stringr::str_extract(my_string, "[A-z|\\s]+")
```
:::

::::



## The wonderful world of regex

**How can we specify generic patterns?**

<br/>



{{< fa circle-right >}} &nbsp;**Regular expressions**, or **_regex_**: a concise language for describing patterns in strings. More [**here**](https://r4ds.had.co.nz/strings.html).

<br/>



**Examples**



:::: {.columns}

::: {.column width=40%}
```{r}
#| eval: true
#| echo: true

## Create a string ----

my_string <- "My email is: camille123@gmail.com ."
```


:::

::: {.column width=60%}
```{r}
#| echo: true

## Check for double 'l' ----

stringr::str_detect(my_string, "l{2}")
```

<br/>

```{r}
#| echo: true

## Remove trailing whitespace and dot ----

stringr::str_remove(my_string, "\\s\\.$")
```


<br/>

```{r}
#| echo: true

## Extract email ----

stringr::str_remove(my_string, "^[^c]*")
```
:::

::::



## `stringr` cheatsheet

![Source: <https://rstudio.github.io/cheatsheets/html/strings.html>](images/stringr-cheatsheet.png){width=60% fig-align='center'}



## Working w/ dates

:::: {.columns}

::: {.column width=50%}
![](images/lubridate-screenshot.png)

<br>

Available at: <https://lubridate.tidyverse.org/>
:::

::: {.column width=50%}
<br>

```{r}
#| eval: false
#| echo: true

# Install 'lubridate' package ----
install.packages("lubridate")
```

<br>


| Function                      | Description                                 |
|:------------------------------|:--------------------------------------------|
| `ymd()`, `ydm()`, etc.        | Parse dates with year, month, and day       |
|  `ms()`, `hm()`, `hms()`      | Parse periods                               |
| `ymd_hms()`, `dmy_hm()`       | Parse date-times                            |
| `year()`                      | Get years component of a date-time          |
| `month()`                     | Get months component of a date-time         |
| `hour()`                      | Get hours component of a date-time          |
| `week()`                      | Get weeks component of a date-time          |
| `now()`                       | Get current day and time                    |

: Table: Main functions of `lubridate`
:::
::::



## Working w/ dates

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: true
#| warning: false

## Attach the package 'lubridate' ----

library("lubridate")
```
:::

::: {.column width=50%}
:::
::::

<br/>


:::: {.columns}

::: {.column width=50%}
**Parsing date**

```{r}
#| echo: true

## Parse dates ----

dates <- c(ymd("20110604"), mdy("06-04-2011"), dmy("04/06/2011"), 
           mdy("June 4th, 2011"))

dates
```


<br/>

:::

::: {.column width=50%}
:::

::::



## Working w/ dates

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: true
#| warning: false

## Attach the package 'lubridate' ----

library("lubridate")
```
:::

::: {.column width=50%}
:::
::::

<br/>


:::: {.columns}

::: {.column width=50%}
**Parsing date**

```{r}
#| echo: true

## Parse dates ----

dates <- c(ymd("20110604"), mdy("06-04-2011"), dmy("04/06/2011"), 
           mdy("June 4th, 2011"))

dates
```


<br/>


**Parsing date-times**

```{r}
#| echo: true

## Parse date-time (and specify timezone) ----

ymd_hms("2017-11-28T14:02:00", tz="Pacific/Auckland")
```

:::

::: {.column width=50%}
:::

::::


## Working w/ dates

:::: {.columns}

::: {.column width=50%}
```{r}
#| echo: true
#| warning: false

## Attach the package 'lubridate' ----

library("lubridate")
```
:::

::: {.column width=50%}
:::
::::

<br/>


:::: {.columns}

::: {.column width=50%}
**Parsing date**

```{r}
#| echo: true

## Parse dates ----

dates <- c(ymd("20110604"), mdy("06-04-2011"), dmy("04/06/2011"), 
           mdy("June 4th, 2011"))

dates
```


<br/>


**Parsing date-times**

```{r}
#| echo: true

## Parse date-time (and specify timezone) ----

ymd_hms("2017-11-28T14:02:00", tz="Pacific/Auckland")
```

:::

::: {.column width=50%}
**Extract components**

```{r}
#| echo: true

## Get current date-time ----

x <- now()
x
```

<br/>

```{r}
#| echo: true

## Extract date ----

date(x)
```

```{r}
#| echo: true

## Extract year ----

year(x)
```

```{r}
#| echo: true

## Extract hour ----

hour(x)
```
:::

::::




## `lubridate` cheatsheet

![Source: <https://rstudio.github.io/cheatsheets/html/lubridate.html>](images/lubridate-cheatsheet.png){width=60% fig-align='center'}


